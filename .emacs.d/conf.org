* Start off with some highly [[https://github.com/hrs/sensible-defaults.el][sensible defaults]]
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/bind-commenting-and-uncommenting)
  (sensible-defaults/backup-to-temp-directory)

  ;; Prevent outdated bytecode from being loaded
  (setq load-prefer-newer t)
#+END_SRC


* Set up use-package
** Make sure it's installed, and set some options
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Extra info in *Messages*
  (setq use-package-verbose t)

  ;; Download and install automatically if not found
  (setq use-package-always-ensure t)

  (eval-when-compile  ;; <-- Not sure what this is doing
    (require 'use-package))

  ;; use-package's keybinding macro
  (require 'bind-key)
#+END_SRC

** Prevent loading old bytecode with [[https://melpa.org/#/auto-compile][auto-compile]]
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
#+END_SRC


* UI
** Hide toolbars, menus, etc
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (when window-system  ;; Will be nil if using emacs in terminal
    (scroll-bar-mode 0))
  ;; Disable all alarms
  (setq ring-bell-function 'ignore)
#+END_SRC

** Set default font and custom resize behavior
These custom scaling functions affect text EVERYWHERE, not just the current buffer.
#+BEGIN_SRC emacs-lisp
  (setq gw/default-font "Input")
  (setq gw/default-font-size 13)
  (setq gw/current-font-size gw/default-font-size)

  (setq gw/font-change-increment 1.1)

  (defun gw/font-code ()
    "Return a string representing the current font (like \"Input-12\")."
    (concat gw/default-font "-" (number-to-string gw/current-font-size)))

  (defun gw/set-font-size ()
    "Set the font to `gw/default-font' at `gw/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (gw/font-code)))
      (add-to-list 'default-frame-alist (cons 'font font-code))
      (set-frame-font font-code)))

  (defun gw/reset-font-size ()
    "Change font size back to `gw/default-font-size'."
    (interactive)
    (setq gw/current-font-size gw/default-font-size)
    (gw/set-font-size))

  (defun gw/increase-font-size ()
    "Increase current font size by a factor of `gw/font-change-increment'."
    (interactive)
    (setq gw/current-font-size
          (ceiling (* gw/current-font-size gw/font-change-increment)))
    (gw/set-font-size))

  (defun gw/decrease-font-size ()
    "Decrease current font size by a factor of `gw/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq gw/current-font-size
          (max 1
               (floor (/ gw/current-font-size gw/font-change-increment))))
    (gw/set-font-size))

  (global-set-key (kbd "C-x C-+") 'gw/increase-font-size)
  (global-set-key (kbd "C-x C--") 'gw/decrease-font-size)

  (gw/reset-font-size)
#+END_SRC

** Slower mouse scrolling
#+BEGIN_SRC emacs-lisp
  ;; 2 lines per scroll instead of 5
  (setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control) . nil)))

  ;; Don't accelerate scrolling
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC
** Solid cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** Org Mode
*** Syntax highlight code blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC


* Indentation / tabs
** Never use tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Display tabs as 4 spaces wide
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

* Editing Text
** Auto-insert the other half of a pair
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
** Don't allow invisible edits in Org mode
It's easy to accidentally edit across folds--throw an error.
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits t)
#+END_SRC


* Autocomplete
** Use hippie-expand instead of dabbrev-expand
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC


* Buffers
** Use interactive buffer menu instead of default one
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC


* Point
** Save point location across sessions
#+BEGIN_SRC emacs-lisp
  (save-place-mode)
#+END_SRC


* Searching
** More extensive apropos search
#+BEGIN_SRC emacs-lisp
  (setq apropos-do-all t)
#+END_SRC


* Generic Keybindings / Custom Functions
** Emacs
*** Swap Meta and Super so Meta is closer to thumb
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
#+END_SRC
*** Make C-w kill backwards word if region is not active
#+BEGIN_SRC emacs-lisp
  (defun gw/kill-region-or-word (arg)
      "When called interactively with no region, kill a word backwards."
    (interactive "*p")
    (if (and transient-mark-mode
             mark-active)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))

  (global-set-key (kbd "C-w") 'gw/kill-region-or-word)
#+END_SRC

*** Kill current buffer without asking anything
#+BEGIN_SRC emacs-lisp
  (defun gw/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-c C-k") 'gw/kill-current-buffer)
#+END_SRC


* OS Interaction
** Load newest version of files
